#!/usr/bin/env python3

"""
BlobTools2 - assembly exploration, QC and filtering.

usage: blobtools [<command>] [<args>...] [-h|--help] [--version]

commands:
    add             add data to a BlobDir
    calc            field-based calculations
    create          create a new BlobDir
    filter          filter a BlobDir
    host            host interactive view of all BlobDirs in a directory
    replace         call blobtools add with --replace flag
    remove          remove one or more fields from a BlobDir
    view            generate plots using BlobToolKit Viewer
    -h, --help      show this
    -v, --version   show version number
See 'blobtools <command> --help' for more information on a specific command.

examples:
    # 1. Create a new BlobDir from a FASTA file:
    ./blobtools create --fasta examples/assembly.fasta BlobDir

    # 2. Create a new BlobDir from a BlobDB:
    ./blobtools create --blobdb examples/blobDB.json BlobDir

    # 3. Add Coverage data from a BAM file:
    ./blobtools add --cov examples/assembly.reads.bam BlobDir

    # 4. Assign taxonomy from BLAST hits:
    ./blobtools add add --hits examples/blast.out --taxdump ../taxdump BlobDir

    # 5. Add BUSCO results:
    ./blobtools add --busco examples/busco.tsv BlobDir

    # 6. Host an interactive viewer:
    ./blobtools host BlobDir

    # 7. Filter a BlobDir:
    ./blobtools filter --param length--Min=5000 --output BlobDir_len_gt_5000 BlobDir
"""

import os
import signal
from subprocess import Popen

from docopt import docopt

__version__ = "blobtools v2.5.0"

MAINDIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ""))
LIBDIR = os.path.abspath(os.path.join(MAINDIR, "lib/"))

if __name__ == "__main__":
    ARGS = docopt(__doc__, version=__version__, options_first=True)
    ARGV = [ARGS["<command>"]] + ARGS["<args>"]
    if ARGS["<command>"] == "add":
        PROC = Popen([LIBDIR + "/add.py"] + ARGV)
    elif ARGS["<command>"] == "calc":
        PROC = Popen([LIBDIR + "/calc.py"] + ARGV)
    elif ARGS["<command>"] == "create":
        PROC = Popen([LIBDIR + "/add.py"] + ["add", "--create"] + ARGS["<args>"])
    elif ARGS["<command>"] == "filter":
        PROC = Popen([LIBDIR + "/filter.py"] + ARGV)
    elif ARGS["<command>"] == "host":
        PROC = Popen([LIBDIR + "/host.py"] + ARGV)
    elif ARGS["<command>"] == "replace":
        PROC = Popen([LIBDIR + "/add.py"] + ["add", "--replace"] + ARGS["<args>"])
    elif ARGS["<command>"] == "remove":
        PROC = Popen([LIBDIR + "/remove.py"] + ARGV)
    elif ARGS["<command>"] == "view":
        PROC = Popen([LIBDIR + "/view.py"] + ARGV)
    else:
        PROC = Popen([os.path.join(MAINDIR, "./blobtools"), "-h"])

    try:
        PROC.wait()
    except KeyboardInterrupt:
        PROC.send_signal(signal.SIGINT)
